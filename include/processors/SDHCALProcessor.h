  /// \file SDHCALProcessor.h
/*
 *
 * SDHCALProcessor.h header template automatically generated by a class generator
 * Creation date : sam. mai 31 2014
 *
 * This file is part of SDHCAL libraries.
 * 
 * SDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SDHCALPROCESSOR_H
#define SDHCALPROCESSOR_H

#include "marlin/Processor.h"
#include "Typedef.h"

// root
class TFile;

/** 
 * @brief SDHCALProcessor class
 */ 
class SDHCALProcessor : public marlin::Processor
{
 public:

	SDHCALProcessor();
 virtual ~SDHCALProcessor();

	virtual void init();
	virtual void processRunHeader( EVENT::LCRunHeader* run  );
	virtual void processEvent( EVENT::LCEvent * );
	virtual void check( EVENT::LCEvent * evt );
	virtual void end();

	virtual Processor *newProcessor()
		{ return new SDHCALProcessor(); }

protected:

	void fillRootTree();
	void clearContent();

	std::string                   m_hCalCaloHitCollection;

	CaloHitList                   m_caloHitList;
	OrderedCaloHitList            m_orderedCaloHitList;

	// root output
	TFile                  *m_pRootFile;
	TTreeWrapper           *m_pTTreeWrapper;
	std::string             m_rootFileName;
	std::string             m_rootTreeName;

	std::vector<int>   iCellVector;
	std::vector<int>   jCellVector;
	std::vector<int>   kCellVector;
	std::vector<float> xPosition;
	std::vector<float> yPosition;
	std::vector<float> zPosition;
	std::vector<int>   semiDigitalThresholdVector;
	std::vector<float> weighted2DDensities;
	std::vector<float> unWeighted2DDensities;
	std::vector<float> weighted3DDensities;
	std::vector<float> unWeighted3DDensities;
	float              weighted2DDensitySum;
	float              unWeighted2DDensitySum;
	float              weighted3DDensitySum;
	float              unWeighted3DDensitySum;
	int                nHit;
	int                nHit1;
	int                nHit2;
	int                nHit3;
}; 


#endif  //  SDHCALPROCESSOR_H
