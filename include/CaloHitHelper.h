  /// \file CaloHitHelper.h
/*
 *
 * CaloHitHelper.h header template automatically generated by a class generator
 * Creation date : sam. mai 31 2014
 *
 * This file is part of SDHCAL libraries.
 * 
 * SDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CALOHITHELPER_H
#define CALOHITHELPER_H

#include "Typedef.h"

// std
#include <algorithm>

// sdhcal
#include "CaloHit.h"

namespace EVENT{ class LCCollection; }

/** 
 * @brief CaloHitHelper class
 */ 
class CaloHitHelper 
{
public:

	/**
	 *
	 */
	static void loadCaloHitCollection(const EVENT::LCCollection *pCollection,
			CaloHitList *pCaloHitList,
			OrderedCaloHitList *pOrderedCaloHitList = NULL);

	/**
	 *
	 */
	static void calculateCaloHitDensities(const OrderedCaloHitList &orderedCaloHitList);

	/**
	 *
	 */
	static void getNThreshold1(const CaloHitList &caloHitList, unsigned int &nHit1);

	/**
	 *
	 */
	static void getNThreshold2(const CaloHitList &caloHitList, unsigned int &nHit2);

	/**
	 *
	 */
	static void getNThreshold3(const CaloHitList &caloHitList, unsigned int &nHit3);

	/**
	 *
	 */
	static void getNThresholds(const CaloHitList &caloHitList,
			unsigned int &nHit1, unsigned int &nHit2, unsigned int &nHit3);

private:

	/**
	 */
	static void calculateCaloHitDensity2D(CaloHit *pCaloHit, const CaloHitList &caloHitList);

	/**
	 */
	static void calculateCaloHitDensity3D(CaloHit *pCaloHit, const OrderedCaloHitList &orderedCaloHitList);
}; 

#endif  //  CALOHITHELPER_H
