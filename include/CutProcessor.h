  /// \file CutProcessor.h
/*
 *
 * CutProcessor.h header template automatically generated by a class generator
 * Creation date : lun. janv. 5 2015
 *
 * This file is part of SDHCAL libraries.
 * 
 * SDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author rete
 * @copyright CNRS , IPNL
 */


#ifndef CUTPROCESSOR_H
#define CUTPROCESSOR_H

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>


#include "marlin/Processor.h"
#include "marlin/Exceptions.h"

// lcio includes
#include "IOIMPL/LCFactory.h"
#include "IO/LCWriter.h"
#include "EVENT/CalorimeterHit.h"


/**
 *  @brief  CutProcessor class
 */
class CutProcessor : public marlin::Processor {

public:

	CutProcessor();
	~CutProcessor();

	Processor *newProcessor()
		{ return new CutProcessor(); }

	void init();
	void processRunHeader( EVENT::LCRunHeader* run  );
	void processEvent( EVENT::LCEvent * );
	void check( EVENT::LCEvent * evt );
	void end();

	/**
	 *  @brief Determine whether the event is a single particle shower event
	 */
	bool isSingleParticle();

	/**
	 * @brief  Static function for std::sort() to sort the calo hit collection by increasing layer
	 */
	static bool sortByLayer( EVENT::CalorimeterHit *caloHit1 , EVENT::CalorimeterHit *caloHit2 );

	/**
	 * @brief  Compute the fractal dimension
	 */
	double getFractalDimension();

	/**
	 * @brief  Helper for function for fractal dimension computation
	 */
	int nHitsInCube( int cubeSize );

	/**
	 *  @brief  ijk conversion to a unique key
	 */
	static int ijkToKey( const int i , const int j , const int k );

	/**
	 *  @brief  unique key to ijk conversion
	 */
	static std::vector<int> keyToIJK( const int &key );

	/**
	 *  @brief  Reset event parameters
	 */
	void reset();


protected:

	int                             m_nProcessedEvents;
	std::string                     m_decoderString;
	std::string                     m_sdhcalCollectionName;
	std::vector<std::string>        m_ijkEncoding;

	std::vector<CalorimeterHit*>    m_caloHitCollection;

	int                             m_nbOfLayers;
	int                             m_nCells0;
	int                             m_nCells1;
	std::vector<int>                m_nTouchedLayers;
	std::vector<int>                m_nHit;
	std::vector<double>             m_cog;
	double                          m_radius;
	double                          m_fractalDimension;
	int                             m_showerStartingLayer;
	int                             m_nHitsInEdge;
	int                             m_nHolesAfterStartingPoint;
	int                             m_nHitsInCentralCells;
	int                             m_nMultiParticleEvents;
	std::vector<int>                m_evtIdMultiEvent;


	// processor cut parameters.
	int        m_nHitCut;
	double     m_layerFractionCut;
	double     m_nHitOverNLayerCut;
	double     m_radiusOverCog2Cut;
	int        m_showerStartingLayerCut;
	int        m_nTouchedLayersCut;
	double     m_fractalTimesCentralCellsCut;
	int        m_nHolesCut;
	double     m_nHitEdgePercentCut;
	double     m_largeRMSCut;
	double     m_barycenterPositionCut;
	double     m_cosThetaCut;
	int        m_neutralFirstLayerCut;

};

#endif  //  CUTPROCESSOR_H
