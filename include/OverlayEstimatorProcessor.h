  /// \file OverlayEstimatorProcessor.h
/*
 *
 * OverlayEstimatorProcessor.h header template automatically generated by a class generator
 * Creation date : mar. janv. 13 2015
 *
 * This file is part of SDHCAL libraries.
 * 
 * SDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * SDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef OVERLAYESTIMATORPROCESSOR_H
#define OVERLAYESTIMATORPROCESSOR_H

#include "marlin/Processor.h"
#include "marlin/Exceptions.h"

#include "TTree.h"
#include "TFile.h"
#include "TTreeWrapper.h"

// lcio includes
#include "IOIMPL/LCFactory.h"
#include "IO/LCWriter.h"
#include "EVENT/CalorimeterHit.h"

class OverlayEstimatorProcessor : public marlin::Processor
{
public:

	OverlayEstimatorProcessor();
	~OverlayEstimatorProcessor();

	Processor *newProcessor()
		{ return new OverlayEstimatorProcessor(); }

	void init();
	void processRunHeader( EVENT::LCRunHeader* run  );
	void processEvent( EVENT::LCEvent * );
	void check( EVENT::LCEvent * evt );
	void end();

	void clear();

protected:

	std::string                     m_decoderString;
	std::string                     m_sdhcalCollectionName;
	std::string                     m_rootOutputFileName;
	std::string                     m_rootOutputTreeName;
	std::vector<std::string>        m_ijkEncoding;

	std::vector<EVENT::CalorimeterHit *>   m_calorimeterHitList; // all the hits
	std::vector<EVENT::CalorimeterHit *>   m_calorimeterHitType1List;   // only type 1
	std::vector<EVENT::CalorimeterHit *>   m_calorimeterHitType2List;   // only type 2
	std::vector<EVENT::CalorimeterHit *>   m_calorimeterHitType3List;   // only type 3
	std::vector<EVENT::CalorimeterHit *>   m_calorimeterHitParticle1List;  // only type 1+3
	std::vector<EVENT::CalorimeterHit *>   m_calorimeterHitParticle2List;  // only type 2+3


	TFile              *m_pRootFile;
	TTree              *m_pRootTree;
	TTreeWrapper       *m_pTreeWrapper;
}; 


#endif  //  OVERLAYESTIMATORPROCESSOR_H
